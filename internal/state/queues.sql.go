// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queues.sql

package state

import (
	"context"
	"database/sql"
)

const createQueue = `-- name: CreateQueue :one
INSERT INTO queues (Name, Directory, MaxBandwidth, DownloadStart, DownloadEnd, RetryLimit)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, directory, maxbandwidth, downloadstart, downloadend, retrylimit
`

type CreateQueueParams struct {
	Name          string
	Directory     string
	Maxbandwidth  sql.NullInt64
	Downloadstart sql.NullString
	Downloadend   sql.NullString
	Retrylimit    int64
}

func (q *Queries) CreateQueue(ctx context.Context, arg CreateQueueParams) (Queue, error) {
	row := q.db.QueryRowContext(ctx, createQueue,
		arg.Name,
		arg.Directory,
		arg.Maxbandwidth,
		arg.Downloadstart,
		arg.Downloadend,
		arg.Retrylimit,
	)
	var i Queue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Directory,
		&i.Maxbandwidth,
		&i.Downloadstart,
		&i.Downloadend,
		&i.Retrylimit,
	)
	return i, err
}

const deleteQueue = `-- name: DeleteQueue :exec
DELETE FROM queues
WHERE ID = ?
`

func (q *Queries) DeleteQueue(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQueue, id)
	return err
}

const getQueue = `-- name: GetQueue :one
SELECT id, name, directory, maxbandwidth, downloadstart, downloadend, retrylimit FROM queues
WHERE ID = ?
`

func (q *Queries) GetQueue(ctx context.Context, id int64) (Queue, error) {
	row := q.db.QueryRowContext(ctx, getQueue, id)
	var i Queue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Directory,
		&i.Maxbandwidth,
		&i.Downloadstart,
		&i.Downloadend,
		&i.Retrylimit,
	)
	return i, err
}

const listQueues = `-- name: ListQueues :many
SELECT id, name, directory, maxbandwidth, downloadstart, downloadend, retrylimit FROM queues
`

func (q *Queries) ListQueues(ctx context.Context) ([]Queue, error) {
	rows, err := q.db.QueryContext(ctx, listQueues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Queue
	for rows.Next() {
		var i Queue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Directory,
			&i.Maxbandwidth,
			&i.Downloadstart,
			&i.Downloadend,
			&i.Retrylimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQueue = `-- name: UpdateQueue :one
UPDATE queues
SET Name = ?, Directory = ?, MaxBandwidth = ?, DownloadStart = ?, DownloadEnd = ?, RetryLimit = ?
WHERE ID = ?
RETURNING id, name, directory, maxbandwidth, downloadstart, downloadend, retrylimit
`

type UpdateQueueParams struct {
	Name          string
	Directory     string
	Maxbandwidth  sql.NullInt64
	Downloadstart sql.NullString
	Downloadend   sql.NullString
	Retrylimit    int64
	ID            int64
}

func (q *Queries) UpdateQueue(ctx context.Context, arg UpdateQueueParams) (Queue, error) {
	row := q.db.QueryRowContext(ctx, updateQueue,
		arg.Name,
		arg.Directory,
		arg.Maxbandwidth,
		arg.Downloadstart,
		arg.Downloadend,
		arg.Retrylimit,
		arg.ID,
	)
	var i Queue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Directory,
		&i.Maxbandwidth,
		&i.Downloadstart,
		&i.Downloadend,
		&i.Retrylimit,
	)
	return i, err
}
